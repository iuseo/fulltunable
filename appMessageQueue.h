#ifndef _APPMESSAGEQUEUE_H_
#define _APPMESSAGEQUEUE_H_

#define QUEUE_SIZE_MAX		64

typedef enum
{
	EVENT_NONE = 0,
	EVENT_SOFT_DISABLE,
	/* TL6100 */
	EVENT_TL6100_FRONT_PAIR,
	EVENT_TL6100_FRONT_ODD,
	EVENT_TL6100_FRONT_EVEN,
	EVENT_TL6100_REAR,
	EVENT_TL6100_PHASE,
	EVENT_TL6100_REAR_SOA,
	EVENT_TL6100_GAIN,
	EVENT_TL6100_FRONT_SOA,
	EVENT_TL6100_IMB_LEFT,
	EVENT_TL6100_IMB_RIGHT,
	EVENT_TL6100_BIAS_LEFT,
	EVENT_TL6100_BIAS_RIGHT,
	EVENT_TL6100_TOSA_CONFIG_SAVE,
	EVENT_TL6100_TOSA_CONFIG_LOAD,
	/* SFF-8690 */
	EVENT_SFP_8690_LOOPBACK,
	EVENT_SFF_8690_CHANNEL,
	EVENT_SFF_8690_FREQUENCY,
    EVENT_SFF_8690_DITHERING,
    EVENT_SFF_8690_TX_DITHER,
    EVENT_SFF_8690_LFL1,
    EVENT_SFF_8690_LFL2,
    EVENT_SFF_8690_LFH1,
    EVENT_SFF_8690_LFH2,
    EVENT_SFF_8690_LGRID,
	MAX_EVENT
} EVENT_LIST;

typedef struct
{
	EVENT_LIST event;
//	uint16 uint16Data;	/* jhRoh */
} QUEUE_MESSAGE_T;

typedef struct
{
	QUEUE_MESSAGE_T messageArray[QUEUE_SIZE_MAX];
	uint8 front;
	uint8 rear;
} QUEUE_TYPE_T;

void initializeQueue(QUEUE_TYPE_T *queue);
static bool isQueueFull(QUEUE_TYPE_T *queue);
static bool isQueueEmpty(QUEUE_TYPE_T *queue);
void sendMessage(QUEUE_TYPE_T *queue, EVENT_LIST event, uint16 data);
static void putMessage(QUEUE_TYPE_T *queue, QUEUE_MESSAGE_T message);
QUEUE_MESSAGE_T getMessage(QUEUE_TYPE_T *queue);
QUEUE_TYPE_T *getMessageQueue(void);
bool waitForEvent(EVENT_LIST targetEvent);

#endif
